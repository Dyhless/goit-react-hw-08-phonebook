{"version":3,"file":"static/js/525.1d9f2594.chunk.js","mappings":"2SAGaA,GAAaC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uLAWzBC,EAAQJ,EAAAA,EAAOK,MAAKC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8GAQpBI,GAAQP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0JAUrBO,EAASV,EAAAA,EAAOW,OAAMC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,ooBA8BtBU,GAAcb,EAAAA,EAAAA,GAAOc,EAAAA,GAAPd,CAAoBe,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,oE,SChDzCa,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGCC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAExBI,EAAoB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACpB,OADwBJ,EAASD,EAATC,UAC5CT,GAAa,GAAOW,EAAAE,KAAA,EACdpB,GAASqB,EAAAA,EAAAA,IAASP,IAAS,KAAD,EAChCP,GAAa,GACbS,IAAa,wBAAAE,EAAAI,OAAA,GAAAT,EAAA,KACd,gBALyBU,EAAAC,GAAA,OAAAf,EAAAgB,MAAA,KAAAC,UAAA,KAO1B,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,cAAelC,EAAemC,SAAUtB,EAAqBuB,SAClE,kBACCC,EAAAA,EAAAA,MAACtD,EAAU,CAAAqD,SAAA,EACTC,EAAAA,EAAAA,MAACjD,EAAK,CAAAgD,SAAA,CAAC,YAGLJ,EAAAA,EAAAA,KAACzC,EAAK,CAAC+C,KAAK,OAAOrC,KAAK,SAAU,KAElC+B,EAAAA,EAAAA,KAACnC,EAAW,CAACI,KAAK,OAAOsC,UAAU,QAAS,QAE9CF,EAAAA,EAAAA,MAACjD,EAAK,CAAAgD,SAAA,CAAC,SAGLJ,EAAAA,EAAAA,KAACzC,EAAK,CAAC+C,KAAK,QAAQrC,KAAK,UAAW,KAEpC+B,EAAAA,EAAAA,KAACnC,EAAW,CAACI,KAAK,QAAQsC,UAAU,QAAS,QAE/CF,EAAAA,EAAAA,MAACjD,EAAK,CAAAgD,SAAA,CAAC,YAGLJ,EAAAA,EAAAA,KAACzC,EAAK,CAAC+C,KAAK,WAAWrC,KAAK,aAAc,KAE1C+B,EAAAA,EAAAA,KAACnC,EAAW,CAACI,KAAK,WAAWsC,UAAU,QAAS,QAElDF,EAAAA,EAAAA,MAAC3C,EAAM,CAAC4C,KAAK,SAASE,SAAU7B,EAAUyB,SAAA,CAEvCzB,IAAaqB,EAAAA,EAAAA,KAACS,EAAAA,EAAM,IAAI,YAAU,SAE1B,GAIrB,E,UC7De,SAASC,IACtB,OACEL,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAAP,SAAA,EACEJ,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CAAAR,UACbJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,oBAETJ,EAAAA,EAAAA,KAAC5B,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  border-radius: 5px;\n  min-width: 350px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  row-gap: 2px;\n  color: white;\n  max-width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 300px;\n  min-height: 26px;\n  padding: 1px 5px;\n  font-size: 16px;\n  outline: none;\n  border-radius: 5px;\n  border-width: 0;\n`;\n\nexport const Button = styled.button`\n  font-family: inherit;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 5px;\n  min-width: 140px;\n  min-height: 30px;\n  margin-top: 10px;\n  cursor: pointer;\n  font-size: 16px;\n  font-family: inherit;\n  font-weight: bold;\n\n  padding: 10px 10px;\n  background-color: #007aff;\n  color: white;\n  border: none;\n  border-radius: 6px;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: white;\n    background-color: #ff9f09;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-size: 14px;\n  color: black;\n  max-width: 300px;\n`;\n","import { useState } from 'react'; // Импорт хука useState для управления состоянием\nimport { Formik } from 'formik'; // Импорт Formik для управления состоянием формы\nimport { useDispatch } from 'react-redux'; // Импорт хука useDispatch для отправки действий Redux\nimport { register } from 'redux/authentication/connectionsApi'; // Импорт действия для регистрации пользователя\nimport 'react-toastify/dist/ReactToastify.css'; // Импорт CSS для уведомлений toast\nimport { Loader } from 'components/Loader'; // Импорт компонента Loader для отображения индикатора загрузки\nimport {\n  Button,\n  Input,\n  Label,\n  StyledForm,\n  StyledError,\n} from './RegisterForm.styled'; // Импорт стилизованных компонентов для формы регистрации\n\nconst defaultValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch(); // Инициализация хука useDispatch для отправки действий\n  const [isLoading, setIsLoading] = useState(false); // Инициализация состояния для отслеживания загрузки\n\n  const handleRegisterSubmit = async (values, { resetForm }) => {\n    setIsLoading(true); // Установка состояния isLoading в true при отправке формы\n    await dispatch(register(values)); // Отправка действия для регистрации пользователя\n    setIsLoading(false); // Сброс состояния isLoading в false после завершения загрузки\n    resetForm(); // Сброс формы после успешной регистрации\n  };\n\n  return (\n    <Formik initialValues={defaultValues} onSubmit={handleRegisterSubmit}>\n      {() => (\n        <StyledForm>\n          <Label>\n            Username\n            {/* Поле ввода для имени пользователя */}\n            <Input type=\"text\" name=\"name\" />{' '}\n            {/* Отображение сообщения об ошибке для поля имени пользователя */}\n            <StyledError name=\"name\" component=\"div\" />{' '}\n          </Label>\n          <Label>\n            Email\n            {/* Поле ввода для электронной почты */}\n            <Input type=\"email\" name=\"email\" />{' '}\n            {/* Отображение сообщения об ошибке для поля email */}\n            <StyledError name=\"email\" component=\"div\" />{' '}\n          </Label>\n          <Label>\n            Password\n            {/* Поле ввода для пароля */}\n            <Input type=\"password\" name=\"password\" />{' '}\n            {/* Отображение сообщения об ошибке для поля password */}\n            <StyledError name=\"password\" component=\"div\" />{' '}\n          </Label>\n          <Button type=\"submit\" disabled={isLoading}>\n            {/* Отображение индикатора загрузки во время отправки формы */}\n            {isLoading && <Loader />} Register{' '}\n          </Button>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { HelmetProvider } from 'react-helmet-async';\n\nexport default function Register() {\n  return (\n    <>\n      <HelmetProvider>\n        <title>Registration</title>\n      </HelmetProvider>\n      <RegisterForm />\n    </>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","label","_templateObject2","Input","Field","_templateObject3","Button","button","_templateObject4","StyledError","ErrorMessage","_templateObject5","defaultValues","name","email","password","RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","handleRegisterSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","wrap","_context","prev","next","register","stop","_x","_x2","apply","arguments","_jsx","Formik","initialValues","onSubmit","children","_jsxs","type","component","disabled","Loader","Register","_Fragment","HelmetProvider"],"sourceRoot":""}