{"version":3,"file":"static/js/784.12198d66.chunk.js","mappings":"mRAGaA,GAAaC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yNAYzBC,EAAQJ,EAAAA,EAAOK,MAAKC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8GAQpBI,GAAQP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0JAUrBO,EAASV,EAAAA,EAAOW,OAAMC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,ooBA8BtBU,GAAcb,EAAAA,EAAAA,GAAOc,EAAAA,GAAPd,CAAoBe,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,oE,SCjDzCa,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGCC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAExBI,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACjB,OADqBJ,EAASD,EAATC,UACzCT,GAAa,GAAOW,EAAAE,KAAA,EACdpB,GAASqB,EAAAA,EAAAA,IAAMP,IAAS,KAAD,EAC7BP,GAAa,GACbS,IAAa,wBAAAE,EAAAI,OAAA,GAAAT,EAAA,KACd,gBALsBU,EAAAC,GAAA,OAAAf,EAAAgB,MAAA,KAAAC,UAAA,KAOvB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,cAAejC,EAAekC,SAAUtB,EAAkBuB,UAChEC,EAAAA,EAAAA,MAACrD,EAAU,CAAAoD,SAAA,EACTC,EAAAA,EAAAA,MAAChD,EAAK,CAAA+C,SAAA,CAAC,SAELJ,EAAAA,EAAAA,KAACxC,EAAK,CAAC8C,KAAK,QAAQC,KAAK,UAAW,KAEpCP,EAAAA,EAAAA,KAAClC,EAAW,CAACyC,KAAK,QAAQC,UAAU,QAAS,QAG/CH,EAAAA,EAAAA,MAAChD,EAAK,CAAA+C,SAAA,CAAC,YAELJ,EAAAA,EAAAA,KAACxC,EAAK,CAAC8C,KAAK,WAAWC,KAAK,aAAc,KAE1CP,EAAAA,EAAAA,KAAClC,EAAW,CAACyC,KAAK,WAAWC,UAAU,QAAS,QAGlDH,EAAAA,EAAAA,MAAC1C,EAAM,CAAC2C,KAAK,SAASG,SAAU9B,EAAUyB,SAAA,CACvCzB,IAAaqB,EAAAA,EAAAA,KAACU,EAAAA,EAAM,IAAI,UAAQ,WAM3C,E,UCnDe,SAASC,IACtB,OACEN,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAR,SAAA,EACEJ,EAAAA,EAAAA,KAACa,EAAAA,GAAc,CAAAT,UACbJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,aAETJ,EAAAA,EAAAA,KAAC5B,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  /* border: 2px black solid; */\n  border-radius: 5px;\n  min-width: 350px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  row-gap: 2px;\n  color: white;\n  max-width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 300px;\n  min-height: 26px;\n  padding: 1px 5px;\n  font-size: 16px;\n  outline: none;\n  border-radius: 5px;\n  border-width: 0;\n`;\n\nexport const Button = styled.button`\n  font-family: inherit;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 5px;\n  min-width: 140px;\n  min-height: 30px;\n  margin-top: 10px;\n  cursor: pointer;\n  font-size: 16px;\n  font-family: inherit;\n  font-weight: bold;\n\n  padding: 10px 10px;\n  background-color: #007aff;\n  color: white;\n  border: none;\n  border-radius: 6px;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: white;\n    background-color: #ff9f09;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-size: 14px;\n  color: black;\n  max-width: 300px;\n`;\n","import { useState } from 'react'; // Импорт хука useState для управления состоянием\nimport { Formik } from 'formik'; // Импорт Formik для управления состоянием формы\nimport { useDispatch } from 'react-redux'; // Импорт хука useDispatch для отправки действий Redux\nimport { logIn } from 'redux/authentication/connectionsApi'; // Импорт действия для входа пользователя\nimport 'react-toastify/dist/ReactToastify.css'; // Импорт CSS для уведомлений toast\nimport { Loader } from 'components/Loader'; // Импорт компонента Loader для отображения индикатора загрузки\nimport {\n  Button,\n  Input,\n  Label,\n  StyledForm,\n  StyledError,\n} from './LoginForm.styled'; // Импорт стилизованных компонентов для формы входа\n\nconst defaultValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch(); // Инициализация хука useDispatch для отправки действий\n  const [isLoading, setIsLoading] = useState(false); // Инициализация состояния для отслеживания загрузки\n\n  const handleLoginSubmit = async (values, { resetForm }) => {\n    setIsLoading(true); // Установка состояния isLoading в true при отправке формы\n    await dispatch(logIn(values)); // Отправка действия для входа пользователя\n    setIsLoading(false); // Сброс состояния isLoading в false после завершения загрузки\n    resetForm(); // Сброс формы после успешного входа\n  };\n\n  return (\n    <Formik initialValues={defaultValues} onSubmit={handleLoginSubmit}>\n      <StyledForm>\n        <Label>\n          Email\n          <Input type=\"email\" name=\"email\" />{' '}\n          {/* Поле ввода для электронной почты */}\n          <StyledError name=\"email\" component=\"div\" />{' '}\n          {/* Отображение сообщения об ошибке для поля email */}\n        </Label>\n        <Label>\n          Password\n          <Input type=\"password\" name=\"password\" />{' '}\n          {/* Поле ввода для пароля */}\n          <StyledError name=\"password\" component=\"div\" />{' '}\n          {/* Отображение сообщения об ошибке для поля password */}\n        </Label>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading && <Loader />} Log In{' '}\n          {/* Отображение индикатора загрузки во время отправки формы */}\n        </Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm';\nimport { HelmetProvider } from 'react-helmet-async';\n\nexport default function Login() {\n  return (\n    <>\n      <HelmetProvider>\n        <title>Login</title>\n      </HelmetProvider>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","label","_templateObject2","Input","Field","_templateObject3","Button","button","_templateObject4","StyledError","ErrorMessage","_templateObject5","defaultValues","email","password","LoginForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","handleLoginSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","wrap","_context","prev","next","logIn","stop","_x","_x2","apply","arguments","_jsx","Formik","initialValues","onSubmit","children","_jsxs","type","name","component","disabled","Loader","Login","_Fragment","HelmetProvider"],"sourceRoot":""}