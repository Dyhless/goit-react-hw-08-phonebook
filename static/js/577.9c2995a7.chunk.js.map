{"version":3,"file":"static/js/577.9c2995a7.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectTempContacts = state => state.contacts.tempItems;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  border: 1px orange solid;\n  border-radius: 6px;\n  min-width: 350px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  row-gap: 2px;\n  color: white;\n  max-width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 280px;\n  min-height: 22px;\n  padding: 5px;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  border-radius: 6px;\n  font-size: 18px;\n\n  &:hover {\n    border-color: #dcc8f7;\n    \n    transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n`;\n\nexport const Button = styled.button`\n  padding: 10px 10px;\n  margin-top: 10px;\n  background-color: #007aff;\n  color: white;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  width: 50%;\n  border-radius: 6px;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: white;\n    background-color: #ff9f09;\n    border-color: white;\n    font-weight: bold;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-size: 14px;\n  color: red;\n  max-width: 300px;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/contactsApi';\nimport { addTempContact } from 'redux/contacts/contactsSlice';\nimport { selectIsLoggedIn } from 'redux/authentication/selectors';\nimport {\n  Button,\n  Input,\n  Label,\n  StyledForm,\n  StyledError,\n} from './ContactForm.styled';\nimport { Loader } from 'components/Loader';\n\nconst defaultValues = {\n  name: '',\n  number: '',\n};\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('* Name is required'),\n  number: Yup.string()\n    .required('* Phone number is required')\n    .matches(\n      /^[\\d()+-]+$/,\n      'Phone number can only contain digits and the following symbols: ( ) - +'\n    )\n    .min(8, 'Phone number must be at least 8 characters long'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const [determineAddBtn, setDetermineAddBtn] = useState(false);\n\n  const handleSubmitForm = (values, action) => {\n    setDetermineAddBtn(true);\n    const isInContacts = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      setDetermineAddBtn(false);\n      return toast.warn(`${values.name} уже присутствует в контактах.`);\n    }\n\n    if (isLoggedIn) {\n      dispatch(addContact(values)).then(() => {\n        setDetermineAddBtn(false);\n      });\n    } else {\n      dispatch(addTempContact({ ...values, id: Date.now().toString() }));\n      setDetermineAddBtn(false);\n    }\n\n    action.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={defaultValues}\n      onSubmit={handleSubmitForm}\n      validationSchema={schema}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <StyledError name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Phone number\n          <Input type=\"tel\" name=\"number\" />\n          <StyledError name=\"number\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\" disabled={isLoading && determineAddBtn}>\n          {isLoading && determineAddBtn && <Loader />}\n          Add contact\n        </Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 5px;\n`;\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Name = styled.p`\n  font-size: 18px;\n  font-weight: bold;\n  margin-right: 10px;\n  margin-bottom: 0px;\n`;\n\nexport const Phone = styled.p`\n  color: #007afe;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 5px 15px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  background-color: #4f4f50;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: white;\n    background-color: #ff4539;\n    border-color: white;\n    font-weight: bold;\n`;\n\nexport const Empty = styled.p`\n  color: #383838;\n`;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'redux/contacts/contactsApi';\nimport { Loader } from 'components/Loader';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n  selectTempContacts,\n} from 'redux/contacts/selectors';\nimport { selectIsLoggedIn } from 'redux/authentication/selectors';\nimport {\n  List,\n  ListItem,\n  ContactInfo,\n  Name,\n  Phone,\n  DeleteButton,\n  Empty,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const tempContacts = useSelector(selectTempContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [contactToDeleteId, setContactToDeleteId] = useState(null);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  const contactsToDisplay = isLoggedIn ? visibleContacts : tempContacts;\n\n  if (!contactsToDisplay.length && !error && !isLoading) {\n    return <Empty>No contacts</Empty>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <List>\n      {contactsToDisplay.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <ContactInfo>\n            <Name>{name}</Name>\n            <Phone>{number}</Phone>\n          </ContactInfo>\n          <DeleteButton\n            type=\"button\"\n            onClick={() => {\n              setContactToDeleteId(id);\n              if (isLoggedIn) {\n                dispatch(deleteContact(id)).then(() =>\n                  setContactToDeleteId(null)\n                );\n              } else {\n                dispatch({ type: 'contacts/deleteTempContact', payload: id });\n                setContactToDeleteId(null);\n              }\n            }}\n            disabled={isLoading && contactToDeleteId === id}\n          >\n            {contactToDeleteId === id ? <Loader /> : 'Delete'}\n          </DeleteButton>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  min-width: 280px;\n  min-height: 22px;\n  padding: 5px;\n  margin-bottom: 15px;\n  margin-top: 5px;\n  border-radius: 6px;\n  font-size: 18px;\n\n  &:hover {\n    border-color: #dcc8f7;\n    \n    transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n`;\n","import { Input } from './Filter.styled';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Input\n      type=\"text\"\n      value={filter}\n      onChange={event => dispatch(setFilter(event.target.value.trim()))}\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 600px;\n  margin: 0 auto;\n`;\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  border: 1px orange solid;\n  border-radius: 6px;\n  min-width: 350px;\n`;\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 20px;\n  font-size: 32px;\n  text-align: center;\n  color: white;\n`;\n\nexport const ContactsTitle = styled.p`\n  margin-bottom: 10px;\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n  color: white;\n`;\n\nexport const FilterTitle = styled.p`\n  margin-bottom: 3px;\n  font-size: 18px;\n  text-align: center;\n  color: white;\n`;\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { HelmetProvider } from 'react-helmet-async';\nimport {\n  ContactsContainer,\n  ContactsTitle,\n  FilterTitle,\n  MainTitle,\n  MainContainer,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  return (\n    <HelmetProvider>\n      <MainContainer>\n        <MainTitle>Phonebook</MainTitle>\n        <ContactForm />\n        <ContactsTitle>Contacts</ContactsTitle>\n        <ContactsContainer>\n          <FilterTitle>Search your contact name</FilterTitle>\n          <Filter />\n          <ContactList />\n        </ContactsContainer>\n      </MainContainer>\n    </HelmetProvider>\n  );\n}\n"],"names":["selectFilter","state","filter","selectTempContacts","contacts","tempItems","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","label","_templateObject2","Input","Field","_templateObject3","Button","button","_templateObject4","StyledError","ErrorMessage","_templateObject5","defaultValues","number","schema","Yup","shape","required","matches","min","ContactForm","dispatch","useDispatch","useSelector","isLoggedIn","selectIsLoggedIn","_useState","useState","_useState2","_slicedToArray","determineAddBtn","setDetermineAddBtn","_jsx","Formik","initialValues","onSubmit","values","action","some","_ref","toast","warn","concat","addContact","then","addTempContact","_objectSpread","id","Date","now","toString","resetForm","validationSchema","children","_jsxs","type","component","disabled","Loader","List","ul","ListItem","li","ContactInfo","div","Name","p","Phone","DeleteButton","_templateObject6","Empty","_templateObject7","ContactList","visibleContacts","tempContacts","contactToDeleteId","setContactToDeleteId","useEffect","fetchContacts","contactsToDisplay","length","map","onClick","deleteContact","payload","input","Filter","value","onChange","event","setFilter","target","trim","MainContainer","ContactsContainer","MainTitle","h1","ContactsTitle","FilterTitle","Contacts","HelmetProvider"],"sourceRoot":""}